from op_analytics.datapipeline.models.code.account_abstraction.function_decoders import (
    inner_handle_op_decoder,
)

# https://basescan.org/tx/0xa6afb687ed95e708b6086b8fd864cd56bd46746c9850e943a035c4863f88fbed
trace_input_v0_6_0 = "0x1d73275600000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000da02730a01bfa6bef7ab08ee6cf2df924dc22c4c000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000002ebb8000000000000000000000000000000000000000000000000000000000001cddb0000000000000000000000000000000000000000000000000000000000017e6d000000000000000000000000000000f6faeda8f7bfa1a8589b4b6e2d71c37592000000000000000000000000000000000000000000000000000000000060ad31000000000000000000000000000000000000000000000000000000000010c8e0ae38f634347b7f2a56c3f9b8dae1d393b926997af86d30d253df27d5de4da5ba000000000000000000000000000000000000000000000000000003b60a3383d600000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000024598000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000002445c1c6dcd000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000066c6c6fca286f48a7f4e989b7198c26caf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000184fec93e4900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000008d3d00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cfa99450bd44b2a69d1d9d002a253bac66c787000000000000000000000000000000000000000000000000000000000060ad31000000000000000000000000000000000000000000000000000000000010c8e0"

# https://basescan.org/tx/0x7567abffc05821a221c1c48e9a70b1dc6d807aa64f70baa41a4024464ece3864
trace_input_v0_7_0 = "0x0042dc5300000000000000000000000000000000000000000000000000000000000002000000000000000000000000001a38889b6a9971968347f33e3a4fc1af0715b3d90000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000008647000000000000000000000000000000000000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000249f000000000000000000000000000000000000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000011170000000000000000000000000592e1224d203be4214b15e205f6081fbbacfcd2d00000000000000000000000000000000000000000000000000000000004eb0ec00000000000000000000000000000000000000000000000000000000000f4240d749754ba43604d048d33a4bb3f0dc47207cf101af5e1c3b9200722a873195030000000000000000000000000000000000000000000000000000048cb5800ac0000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000879db0000000000000000000000000000000000000000000000000000000000000380000000000000000000000000000000000000000000000000000000000000014434fcd5be0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000003f14920c99beb920afa163031c4e47a3e03b3e4a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000c800f68e363f14986a6ad0ce40dd5324097a219c00000000000000000000000000000000000000000000000000000000000003e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000010a090000000000000000000000001a38889b6a9971968347f33e3a4fc1af0715b3d9"


def test_inner_handle_op():
    decoder = inner_handle_op_decoder()

    # The same decoder can handle both v6 and v7.
    actual = [
        decoder.decode(trace_input_v0_6_0),
        decoder.decode(trace_input_v0_7_0),
    ]
    assert actual == [
        {
            "decoding_status": "ok",
            "method_id": "0x1d732756",
            "v0_6_0": {
                "call_data": "0x5c1c6dcd000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000066c6c6fca286f48a7f4e989b7198c26caf000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000184fec93e4900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000008d3d00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "op_info": {
                    "m_user_op": {
                        "sender": "0xda02730a01bfa6bef7ab08ee6cf2df924dc22c4c",
                        "nonce": {"value": 60, "lossless": "60"},
                        "call_gas_limit": {"value": 191416, "lossless": "191416"},
                        "verification_gas_limit": {"value": 118235, "lossless": "118235"},
                        "pre_verification_gas": {"value": 97901, "lossless": "97901"},
                        "paymaster": "0x000000f6faeda8f7bfa1a8589b4b6e2d71c37592",
                        "max_fee_per_gas": {"value": 6335793, "lossless": "6335793"},
                        "max_priority_fee_per_gas": {"value": 1100000, "lossless": "1100000"},
                    },
                    "user_op_hash": "0xae38f634347b7f2a56c3f9b8dae1d393b926997af86d30d253df27d5de4da5ba",
                    "prefund": {"value": 4080390079446, "lossless": "4080390079446"},
                    "context_offset": {"value": 1312, "lossless": "1312"},
                    "pre_op_gas": {"value": 148888, "lossless": "148888"},
                },
                "context": "0x000000000000000000000000275fa99450bd44b2a69d1d9d002a253bac66c787000000000000000000000000000000000000000000000000000000000060ad31000000000000000000000000000000000000000000000000000000000010c8e0",
            },
            "v0_7_0": None,
        },
        {
            "decoding_status": "ok",
            "method_id": "0x0042dc53",
            "v0_6_0": None,
            "v0_7_0": {
                "call_data": "0x34fcd5be0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000003f14920c99beb920afa163031c4e47a3e03b3e4a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000c800f68e363f14986a6ad0ce40dd5324097a219c00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000",
                "op_info": {
                    "m_user_op": {
                        "sender": "0x1a38889b6a9971968347f33e3a4fc1af0715b3d9",
                        "nonce": {"value": 8, "lossless": "8"},
                        "verification_gas_limit": {"value": 550000, "lossless": "550000"},
                        "call_gas_limit": {"value": 100000, "lossless": "100000"},
                        "paymaster_verification_gas_limit": {"value": 150000, "lossless": "150000"},
                        "paymaster_post_op_gas_limit": {"value": 100000, "lossless": "100000"},
                        "pre_verification_gas": {"value": 70000, "lossless": "70000"},
                        "paymaster": "0x592e1224d203be4214b15e205f6081fbbacfcd2d",
                        "max_fee_per_gas": {"value": 5157100, "lossless": "5157100"},
                        "max_priority_fee_per_gas": {"value": 1000000, "lossless": "1000000"},
                    },
                    "user_op_hash": "0xd749754ba43604d048d33a4bb3f0dc47207cf101af5e1c3b9200722a87319503",
                    "prefund": {"value": 5002387000000, "lossless": "5002387000000"},
                    "context_offset": {"value": 1280, "lossless": "1280"},
                    "pre_op_gas": {"value": 555483, "lossless": "555483"},
                },
                "context": "0x0000000000000000000000000000000000000000000000000000000000010a090000000000000000000000001a38889b6a9971968347f33e3a4fc1af0715b3d9",
            },
        },
    ]
