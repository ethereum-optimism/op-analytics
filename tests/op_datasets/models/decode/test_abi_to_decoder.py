from eth_abi_lite.decoding import (
    ContextFramesBytesIO,
    TupleDecoder,
)

from op_analytics.datapipeline.models.code.account_abstraction.abis import (
    HANDLE_OPS_FUNCTION_ABI_v0_6_0,
    HANDLE_OPS_FUNCTION_ABI_v0_7_0,
)
from op_analytics.datapipeline.models.decode.abi_to_decoder import abi_inputs_to_decoder
from op_analytics.datapipeline.models.decode.abi_to_structmaker import make_duckdb_type, make_struct
from op_analytics.datapipeline.models.decode.conversion import safe_uint256

# Input taken from this transaction:
# https://basescan.org/tx/0xa6afb687ed95e708b6086b8fd864cd56bd46746c9850e943a035c4863f88fbed
tx_input_v0_6_0 = (
    "0x1fad948c"
    "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000cd73c6191906b6f5795efd525f77e65d6aa7561"
    "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020"
    "000000000000000000000000367c9b5c15c214fd96188ce481bf71d1ba0de8bc000000000000000000000000000000000000000000000000000000000000014a"
    "00000000000000000000000000000000000000000000000000000000000001600000000000000000000000000000000000000000000000000000000000000180"
    "0000000000000000000000000000000000000000000000000000000000012bb8000000000000000000000000000000000000000000000000000000000001ce90"
    "00000000000000000000000000000000000000000000000000000000000181230000000000000000000000000000000000000000000000000000000000602ebe"
    "000000000000000000000000000000000000000000000000000000000010c8e00000000000000000000000000000000000000000000000000000000000000440"
    "00000000000000000000000000000000000000000000000000000000000005200000000000000000000000000000000000000000000000000000000000000000"
    "00000000000000000000000000000000000000000000000000000000000002845c1c6dcd00000000000000000000000000000000000000000000000000000000"
    "000000200000000000000000000000004f07f4024e3fe8dd1ba266bab343aa88319e0eed00000000000000000000000000000000000000000000000000038d7e"
    "a4c68000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000"
    "000001c4197218710000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000"
    "00000000000000030000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000"
    "000000000000000000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000367c9b5c15c214fd96188ce4"
    "81bf71d1ba0de8bc000000000000000000000000c5b7e4bbea7103fda9c2f0880101e98cfe5db483000000000000000000000000000000000000000000000000"
    "000000000000000500000000000000000000000000000000000000000000000000000192021872bf000000000000000000000000000000000000000000000000"
    "0000000000000120000000000000000000000000000000000000000000000000000000000000004110defae450019e3953b2a4e7d7931bc5100afb7290fd1c7e"
    "1b9a0591f09dae5f497a137d9069082267ee35b317151783e37c7e07d0e422c12e52871c65f56c311c0000000000000000000000000000000000000000000000"
    "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    "00000000000000000000000000000000000000000000000000000000000000a9000000f6faeda8f7bfa1a8589b4b6e2d71c37592275fa99450bd44b2a69d1d9d"
    "002a253bac66c7870000000000000000000000000000000000000000000000000000000066ea035b000000000000000000000000000000000000000000000000"
    "00000000000000002da327716d12cfc7420572aa043bd208b58a1f6ac13e10027f56db550c56529f62012cf40e5190b0d8725d2da9269bf808924ce31e751363"
    "c981b9679e4449871c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041"
    "5bb6029c8b9048812641e9a650e8a388491d8e34ab23ee6ddd6ad18b55938e261f875106c46b6f6805d936def11b478184361f42b3ac663155854d5fde60c352"
    "1b00000000000000000000000000000000000000000000000000000000000000"
)


# Input taken from this transaction:
# https://basescan.org/tx/0x7567abffc05821a221c1c48e9a70b1dc6d807aa64f70baa41a4024464ece3864
tx_input_v0_7_0 = (
    "0x765e827f"
    "00000000000000000000000000000000000000000000000000000000000000400000000000000000000000009d1478044f781ca722ff257e70d05e4ad673f443"
    "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020"
    "0000000000000000000000001a38889b6a9971968347f33e3a4fc1af0715b3d90000000000000000000000000000000000000000000000000000000000000008"
    "00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000140"
    "00000000000000000000000000086470000000000000000000000000000186a00000000000000000000000000000000000000000000000000000000000011170"
    "000000000000000000000000000f4240000000000000000000000000004eb0ec00000000000000000000000000000000000000000000000000000000000002c0"
    "00000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000"
    "000000000000000000000000000000000000000000000000000000000000014434fcd5be00000000000000000000000000000000000000000000000000000000"
    "00000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000"
    "000000200000000000000000000000003f14920c99beb920afa163031c4e47a3e03b3e4a00000000000000000000000000000000000000000000000000000000"
    "00000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000"
    "00000044a9059cbb000000000000000000000000c800f68e363f14986a6ad0ce40dd5324097a219c000000000000000000000000000000000000000000000000"
    "00000000000003e80000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
    "0000000000000000000000000000000000000000000000000000000000000034592e1224d203be4214b15e205f6081fbbacfcd2d000000000000000000000000"
    "000249f0000000000000000000000000000186a000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e8"
    "01000066ea02ab000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000"
    "00000000000000c00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000"
    "00000000000000170000000000000000000000000000000000000000000000000000000000000001862293c102ba596bcbed6c1cb292f319bad633e3f98913ab"
    "450702901f2a301b31abfd32f48bc63951633e56bb6533e48d8fef2116ae65306560836942c96f24000000000000000000000000000000000000000000000000"
    "000000000000002524cc9f9995c0d360cc08f23cfca3d1c8020687f1047d78064a0783ad6ea3f0221d0000000000000000000000000000000000000000000000"
    "000000000000000000000000000000000000000000000000000000000000000000000000000000767b2274797065223a22776562617574686e2e676574222c22"
    "6368616c6c656e6765223a22415141415a756f437139644a6455756b4e675451534e4d36533750773345636766504542723134634f354941636971484d5a5544"
    "222c226f726967696e223a2268747470733a2f2f73656e642e617070227d00000000000000000000000000000000000000000000000000000000000000000000"
)


def test_v6():
    decoder: TupleDecoder = abi_inputs_to_decoder(HANDLE_OPS_FUNCTION_ABI_v0_6_0)

    stream = ContextFramesBytesIO(bytearray.fromhex(tx_input_v0_6_0[10:]))
    result = decoder.decode(stream)

    assert result == (
        # UserOperation[]
        (
            # UserOperation
            (
                # sender
                "0x367c9b5c15c214fd96188ce481bf71d1ba0de8bc",
                # nonce
                330,
                # initCode
                b"",
                # callData
                b'\\\x1cm\xcd\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00O\x07\xf4\x02N?\xe8\xdd\x1b\xa2f\xba\xb3C\xaa\x881\x9e\x0e\xed\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x8d~\xa4\xc6\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\xc4\x19r\x18q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x8d~\xa4\xc6\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x006|\x9b\\\x15\xc2\x14\xfd\x96\x18\x8c\xe4\x81\xbfq\xd1\xba\r\xe8\xbc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc5\xb7\xe4\xbb\xeaq\x03\xfd\xa9\xc2\xf0\x88\x01\x01\xe9\x8c\xfe]\xb4\x83\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x92\x02\x18r\xbf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00A\x10\xde\xfa\xe4P\x01\x9e9S\xb2\xa4\xe7\xd7\x93\x1b\xc5\x10\n\xfbr\x90\xfd\x1c~\x1b\x9a\x05\x91\xf0\x9d\xae_Iz\x13}\x90i\x08"g\xee5\xb3\x17\x15\x17\x83\xe3|~\x07\xd0\xe4"\xc1.R\x87\x1ce\xf5l1\x1c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
                # callGasLimit
                76728,
                # verificationGasLimit
                118416,
                # preVerificationGas
                98595,
                # maxFeePerGas
                6303422,
                # maxPriorityFeePerGas
                1100000,
                # paymasterAndData
                b"\x00\x00\x00\xf6\xfa\xed\xa8\xf7\xbf\xa1\xa8X\x9bKn-q\xc3u\x92'_\xa9\x94P\xbdD\xb2\xa6\x9d\x1d\x9d\x00*%;\xacf\xc7\x87\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xea\x03[\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00-\xa3'qm\x12\xcf\xc7B\x05r\xaa\x04;\xd2\x08\xb5\x8a\x1fj\xc1>\x10\x02\x7fV\xdbU\x0cVR\x9fb\x01,\xf4\x0eQ\x90\xb0\xd8r]-\xa9&\x9b\xf8\x08\x92L\xe3\x1eu\x13c\xc9\x81\xb9g\x9eDI\x87\x1c",
                # signature
                b"[\xb6\x02\x9c\x8b\x90H\x81&A\xe9\xa6P\xe8\xa3\x88I\x1d\x8e4\xab#\xeem\xddj\xd1\x8bU\x93\x8e&\x1f\x87Q\x06\xc4koh\x05\xd96\xde\xf1\x1bG\x81\x846\x1fB\xb3\xacf1U\x85M_\xde`\xc3R\x1b",
            ),
        ),
        # beneficiary
        "0x0cd73c6191906b6f5795efd525f77e65d6aa7561",
    )

    user_ops_result = []
    for user_op in result[0]:
        user_ops_result.append(
            {
                "sender": user_op[0],
                "call_gas_limit": safe_uint256(user_op[4]),
                "pre_verification_gas": safe_uint256(user_op[5]),
                "max_fee_per_gas": safe_uint256(user_op[6]),
                "max_priority_fee_per_gas": safe_uint256(user_op[7]),
                "beneficiary": result[1],
            }
        )

    assert user_ops_result == [
        {
            "sender": "0x367c9b5c15c214fd96188ce481bf71d1ba0de8bc",
            "call_gas_limit": 76728,
            "pre_verification_gas": 118416,
            "max_fee_per_gas": 98595,
            "max_priority_fee_per_gas": 6303422,
            "beneficiary": "0x0cd73c6191906b6f5795efd525f77e65d6aa7561",
        }
    ]


def test_v7():
    decoder: TupleDecoder = abi_inputs_to_decoder(HANDLE_OPS_FUNCTION_ABI_v0_7_0)

    stream = ContextFramesBytesIO(bytearray.fromhex(tx_input_v0_7_0[10:]))
    result = decoder.decode(stream)

    assert result == (
        (
            # UserOperation
            (
                # sender
                "0x1a38889b6a9971968347f33e3a4fc1af0715b3d9",
                # nonce
                8,
                # initCode
                b"",
                # callData
                b"4\xfc\xd5\xbe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00?\x14\x92\x0c\x99\xbe\xb9 \xaf\xa1c\x03\x1cNG\xa3\xe0;>J\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00`\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00D\xa9\x05\x9c\xbb\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc8\x00\xf6\x8e6?\x14\x98jj\xd0\xce@\xddS$\tz!\x9c\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\xe8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
                # accountGasLimits
                b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08dp\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x86\xa0",
                70000,
                b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0fB@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00N\xb0\xec",
                b"Y.\x12$\xd2\x03\xbeB\x14\xb1^ _`\x81\xfb\xba\xcf\xcd-\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02I\xf0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x86\xa0",
                b'\x01\x00\x00f\xea\x02\xab\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x86"\x93\xc1\x02\xbaYk\xcb\xedl\x1c\xb2\x92\xf3\x19\xba\xd63\xe3\xf9\x89\x13\xabE\x07\x02\x90\x1f*0\x1b1\xab\xfd2\xf4\x8b\xc69Qc>V\xbbe3\xe4\x8d\x8f\xef!\x16\xaee0e`\x83iB\xc9o$\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00%$\xcc\x9f\x99\x95\xc0\xd3`\xcc\x08\xf2<\xfc\xa3\xd1\xc8\x02\x06\x87\xf1\x04}x\x06J\x07\x83\xadn\xa3\xf0"\x1d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00v{"type":"webauthn.get","challenge":"AQAAZuoCq9dJdUukNgTQSNM6S7Pw3EcgfPEBr14cO5IAciqHMZUD","origin":"https://send.app"}\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00',
            ),
        ),
        "0x9d1478044f781ca722ff257e70d05e4ad673f443",
    )

    assert make_struct(HANDLE_OPS_FUNCTION_ABI_v0_7_0, result) == {
        "ops": [
            {
                "sender": "0x1a38889b6a9971968347f33e3a4fc1af0715b3d9",
                "nonce": {"value": 8, "lossless": "8"},
                "init_code": "0x",
                "call_data": "0x34fcd5be0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000003f14920c99beb920afa163031c4e47a3e03b3e4a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000c800f68e363f14986a6ad0ce40dd5324097a219c00000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000",
                "account_gas_limits": "0x00000000000000000000000000086470000000000000000000000000000186a0",
                "pre_verification_gas": {"value": 70000, "lossless": "70000"},
                "gas_fees": "0x000000000000000000000000000f4240000000000000000000000000004eb0ec",
                "paymaster_and_data": "0x592e1224d203be4214b15e205f6081fbbacfcd2d000000000000000000000000000249f0000000000000000000000000000186a0",
                "signature": "0x01000066ea02ab00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000170000000000000000000000000000000000000000000000000000000000000001862293c102ba596bcbed6c1cb292f319bad633e3f98913ab450702901f2a301b31abfd32f48bc63951633e56bb6533e48d8fef2116ae65306560836942c96f24000000000000000000000000000000000000000000000000000000000000002524cc9f9995c0d360cc08f23cfca3d1c8020687f1047d78064a0783ad6ea3f0221d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000767b2274797065223a22776562617574686e2e676574222c226368616c6c656e6765223a22415141415a756f437139644a6455756b4e675451534e4d36533750773345636766504542723134634f354941636971484d5a5544222c226f726967696e223a2268747470733a2f2f73656e642e617070227d00000000000000000000",
            }
        ],
        "beneficiary": "0x9d1478044f781ca722ff257e70d05e4ad673f443",
    }


def test_duckdb_types():
    duckdb_type_v6 = make_duckdb_type(HANDLE_OPS_FUNCTION_ABI_v0_6_0)
    assert (
        duckdb_type_v6
        == "STRUCT(ops STRUCT(sender VARCHAR, nonce STRUCT(value BIGINT, lossless VARCHAR), init_code VARCHAR, call_data VARCHAR, call_gas_limit STRUCT(value BIGINT, lossless VARCHAR), verification_gas_limit STRUCT(value BIGINT, lossless VARCHAR), pre_verification_gas STRUCT(value BIGINT, lossless VARCHAR), max_fee_per_gas STRUCT(value BIGINT, lossless VARCHAR), max_priority_fee_per_gas STRUCT(value BIGINT, lossless VARCHAR), paymaster_and_data VARCHAR, signature VARCHAR)[], beneficiary VARCHAR)"
    )

    duckdb_type_v7 = make_duckdb_type(HANDLE_OPS_FUNCTION_ABI_v0_7_0)
    assert (
        duckdb_type_v7
        == "STRUCT(ops STRUCT(sender VARCHAR, nonce STRUCT(value BIGINT, lossless VARCHAR), init_code VARCHAR, call_data VARCHAR, account_gas_limits VARCHAR, pre_verification_gas STRUCT(value BIGINT, lossless VARCHAR), gas_fees VARCHAR, paymaster_and_data VARCHAR, signature VARCHAR)[], beneficiary VARCHAR)"
    )
