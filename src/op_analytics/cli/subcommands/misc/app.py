import os
import shlex
import subprocess

import typer
from op_coreutils.logger import structlog
from op_coreutils.env import env_get

from op_analytics.cli.subcommands.misc.dbtgen import (
    dbt_docs,
    goldsky_dbt_sources,
    goldsky_dbt_views,
)
from op_analytics.cli.subcommands.misc.docsgen import schema_mapping_docs

log = structlog.get_logger()

app = typer.Typer(help="Miscelaneous housekeeping utilities.", add_completion=False)


@app.command()
def run_with_env(env_vars: list[str], cmd: str):
    """Set environment vars from the op_coreutils vault and run the provided cmd."""
    custom_env = os.environ.copy()

    for var in env_vars:
        value = env_get(var)
        if isinstance(value, str):
            custom_env[var] = env_get(var)
        elif isinstance(value, int):
            custom_env[var] = str(env_get(var))

    result = subprocess.run(shlex.split(cmd), env=custom_env)
    if result.returncode != 0:
        raise subprocess.CalledProcessError(
            result.returncode, "Command did not finish successfully."
        )


app.command(name="customize_dbt")(dbt_docs.customize)


@app.command()
def generate_dbt():
    """Autogenerated dbt source and model files."""
    goldsky_dbt_sources.generate()
    goldsky_dbt_views.generate()


@app.command()
def generate_docs():
    """Autogenerated sphinx docs files."""
    schema_mapping_docs.generate()
