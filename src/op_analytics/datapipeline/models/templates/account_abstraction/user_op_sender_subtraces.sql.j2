WITH

inner_handle_op_traces AS (
  SELECT
    p.transaction_hash
    , p.trace_address
    , p.trace_root
    , p.inner_handle_op['sender'] AS sender
    , p.from_address AS entrypoint_contract_address
    , p.inner_handle_op['contract_name'] AS entrypoint_contract_version
  FROM account_abstraction__user_op_prefiltered_traces AS p
  WHERE
    -- innerHandleOp traces.
    p.method_id IN ({{ inner_handle_op_method_ids }})

)


SELECT
  p.dt
  , p.chain
  , p.chain_id
  , p.network
  --
  , p.block_timestamp
  , p.block_number
  , p.transaction_hash
  , p.from_address
  , p.to_address
  , p.call_type
  , p.trace_address
  , p.trace_root
  --
  , row_number() OVER (PARTITION BY p.transaction_hash, i.trace_address ORDER BY p.trace_address) AS trace_row_number
  , i.trace_address AS inner_handle_op_trace_address
  , i.sender AS inner_handle_op_sender
  , i.entrypoint_contract_address
  , i.entrypoint_contract_version

FROM (
  -- Traces that are not innerHandleOp calls.
  SELECT * -- noqa: RF02
  FROM {{ prefiltered_traces }}
  WHERE method_id NOT IN ({{ inner_handle_op_method_ids }}) -- noqa: RF02
) AS p

LEFT JOIN inner_handle_op_traces AS i ON p.transaction_hash = i.transaction_hash

WHERE
  -- Keep only traces where the from address is the same as the UserOperationEvent sender.
  -- NOTE: This is also part of prefiltering where we use the sender as provided by the log
  --       Including it here also for clarity.
  p.from_address = i.sender


  -- Keep only tracess that are a subtrace of the innerHandleOp trace.
  AND p.trace_address.starts_with(i.trace_address)
