WITH

-- Traces that are innerHandleOp calls.
inner1 AS (
  SELECT
    p.transaction_hash
    , p.trace_address
    , p.trace_root
    , p.from_address AS entrypoint_contract_address
    , decode_inner_handle_op(p.input) AS inner_handle_op
  FROM {{ prefiltered_traces }} AS p
  WHERE
    p.method_id IN ({{ inner_handle_op_method_ids }})
)

-- Extract the sender from the innerHandleOp traces as a top-level column.
, inner2 AS (
  SELECT
    *
    , COALESCE(
      inner_handle_op['v0_6_0']['op_info']['m_user_op']['sender']
      , inner_handle_op['v0_7_0']['op_info']['m_user_op']['sender']
    ) AS sender
  FROM inner1
  WHERE sender IS NOT NULL
)


-- Traces that are parents of the innerHandleOp traces.
SELECT
  p.dt
  , p.chain
  , p.chain_id
  , p.network
  --
  , p.block_timestamp
  , p.block_number
  , p.transaction_hash
  , p.from_address
  , p.to_address
  , p.call_type
  , p.trace_address
  , p.trace_root
  --
  , ROW_NUMBER() OVER (PARTITION BY p.transaction_hash, i.trace_address ORDER BY p.trace_address) AS trace_row_number
  , i.trace_address AS inner_handle_op_trace_address
  , i.sender AS inner_handle_op_sender
  , i.inner_handle_op

FROM (
  -- This subquery contains all traces that are not innerHandleOp calls.
  SELECT * -- noqa: RF02
  FROM {{ prefiltered_traces }}
  WHERE method_id NOT IN ({{ inner_handle_op_method_ids }}) -- noqa: RF02
) AS p

-- Join with the innerHandleOp traces and keep only traces that are parents
-- of an innerHandleOp trace.
LEFT JOIN inner2 AS i ON p.transaction_hash = i.transaction_hash

WHERE
  -- Keep only traces where the from address is the same as the UserOperation sender.
  -- NOTE: This is also part of prefiltering where we use the sender as provided by the log      <!!!!! This is not longer true 
  --       Including it here also for clarity.
  p.from_address = i.sender


  -- Keep only tracess that are a subtrace of the innerHandleOp trace.
  AND p.trace_address.starts_with(i.trace_address)
