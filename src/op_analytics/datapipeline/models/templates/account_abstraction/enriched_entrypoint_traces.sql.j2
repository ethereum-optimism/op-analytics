WITH

-- Traces that are innerHandleOp calls.
decoded_traces AS (
  SELECT
    t.dt
    , t.chain
    , t.chain_id
    , t.network
    --
    , t.block_timestamp
    , t.block_number
    , t.block_hash
    , t.transaction_hash
    , t.transaction_index
    , t.from_address
    , t.to_address
    , t.value_lossless
    , t.input
    , t.output
    , t.trace_type
    , t.call_type
    , t.reward_type
    , t.gas
    , t.gas_used
    , t.subtraces
    , t.trace_address
    , t.error
    , t.status
    , t.trace_root
    , hexstr_method_id(t.input) AS method_id
    , IF(hexstr_method_id(t.input) IN ({{ innerhandleop_method_ids }}), decode_innerhandleop(t.input), NULL) AS decoded
  FROM {{ prefiltered_traces }} AS t
)

-- Destructure the decoded result into our custom column names.
, decoded_traces_exploded AS (
  SELECT
    t.dt
    , t.chain
    , t.chain_id
    , t.network
    --
    , t.block_timestamp
    , t.block_number
    , t.block_hash
    , t.transaction_hash
    , t.transaction_index
    , t.from_address
    , t.to_address
    , t.value_lossless
    , t.input
    , t.output
    , t.trace_type
    , t.call_type
    , t.reward_type
    , t.gas
    , t.gas_used
    , t.subtraces
    , t.trace_address
    , t.error
    , t.status
    , t.trace_root
    , t.method_id
    -- Decoded innerHandleOp
    , IF(t.decoded['opinfo_sender'] IS NULL, NULL, t.trace_address) AS innerhandleop_trace_address
    , t.decoded['decodeerror'] AS innerhandleop_decodeerror
    , t.decoded['opinfo_sender'] AS innerhandleop_opinfo_sender
    , t.decoded['opinfo_paymaster'] AS innerhandleop_opinfo_paymaster
    , t.decoded['opinfo_userophash'] AS innerhandleop_opinfo_userophash
    , t.decoded['opinfo'] AS innerhandleop_opinfo
    , t.decoded['context'] AS innerhandleop_context
    , t.decoded['calldata'] AS innerhandleop_calldata
  FROM decoded_traces AS t
)


, innerhandleop AS (
  SELECT
    t.block_number
    , t.transaction_hash
    , t.innerhandleop_opinfo_sender
    , t.trace_address AS innerhandleop_trace_address
  FROM decoded_traces_exploded AS t
  WHERE t.innerhandleop_opinfo_sender IS NOT NULL
)

-- Use window functions to enrich traces by matching them with the UserOp sender
-- address obtained from decoding innerHandleOp.
SELECT
  t.dt
  , t.chain
  , t.chain_id
  , t.network
  --
  , t.block_timestamp
  , t.block_number
  , t.block_hash
  , t.transaction_hash
  , t.transaction_index
  , t.from_address
  , t.to_address
  , t.value_lossless
  , t.input
  , t.output
  , t.trace_type
  , t.call_type
  , t.reward_type
  , t.gas
  , t.gas_used
  , t.subtraces
  , t.trace_address
  , t.error
  , t.status
  , t.trace_root
  , t.method_id
  -- Add the sender from the parent innerHandleOp
  , t.innerhandleop_decodeerror
  -- Decoded innerHandleOp
  , t.innerhandleop_opinfo_sender
  , t.innerhandleop_opinfo_paymaster
  , t.innerhandleop_opinfo_userophash
  , t.innerhandleop_opinfo
  , t.innerhandleop_context
  , t.innerhandleop_calldata

  -- Values picked up from the self join.
  , i.innerhandleop_trace_address AS matched_userop_trace_address
  , i.innerhandleop_opinfo_sender AS matched_userop_sender

  -- Convenience BOOL value that consumers of this data can use to
  -- filter traces where the UserOp sender is the from_address.
  , i.innerhandleop_opinfo_sender = t.from_address AS is_from_matched_userop_sender


FROM decoded_traces_exploded AS t
LEFT JOIN innerhandleop AS i ON
  t.block_number = i.block_number
  AND t.transaction_hash = i.transaction_hash
  -- Subtraces of the innerHandleOp function call
  AND starts_with(t.trace_address, i.innerhandleop_trace_address)
