WITH

pb AS (
  SELECT
    number
    , base_fee_per_gas
  FROM
    {{ raw_blocks }}
)

-- Select the columns that we want from transactions joined to blocks.
-- Include some minor transformations that are needed for further calculations.
, pt1 AS (
  SELECT
    -- Transaction fields
    t.dt
    , t.chain
    , t.chain_id
    , t.network
    , t.nonce
    , t.transaction_index
    , t.from_address
    , t.to_address
    , t.block_number
    , t.block_timestamp
    , t.hash
    , t.transaction_type
    , t.gas_price
    , t.gas AS gas_limit
    , t.receipt_gas_used AS l2_gas_used
    , t.receipt_l1_gas_used

    -- EXCLUDED
    -- t.input, --comment out for now to save on data space
    -- t.blob_versioned_hashes -- bring in if/when we apply this to L1, or see L2 blobs

    -- L1 Fees
    , CASE WHEN t.gas_price = 0 THEN 0 ELSE t.receipt_l1_fee END AS l1_fee
    , t.receipt_l1_gas_price AS l1_gas_price
    , t.receipt_l1_blob_base_fee AS l1_blob_base_fee
    , b.base_fee_per_gas
    , t.max_priority_fee_per_gas

    -- L1 Fee Scalars
    , t.receipt_l1_fee_scalar::DECIMAL(12, 6) AS l1_fee_scalar
    , micro(t.receipt_l1_base_fee_scalar) AS l1_base_fee_scalar
    , micro(t.receipt_l1_blob_base_fee_scalar) AS l1_blob_base_fee_scalar

    -- L2 Fees and breakdown into BASE and PRIORITY contributions
    , if(t.max_priority_fee_per_gas = 0 AND t.gas_price > 0, t.gas_price - b.base_fee_per_gas, 0) AS legacy_extra_fee_per_gas
    , CASE WHEN t.gas_price = 0 THEN 0 ELSE t.gas_price * t.receipt_gas_used END AS l2_fee
    , CASE WHEN t.gas_price = 0 THEN 0 ELSE t.max_priority_fee_per_gas * t.receipt_gas_used END AS l2_priority_fee
    , CASE WHEN t.gas_price = 0 THEN 0 ELSE b.base_fee_per_gas * t.receipt_gas_used END AS l2_base_fee

    -- Transaction Information
    , hexstr_method_id(t.input) AS method_id
    , t.receipt_status = 1 AS success
    , hexstr_bytelen(t.input) AS input_byte_length
    , hexstr_zero_bytes(t.input) AS input_zero_bytes
    , t.transaction_type = 126 OR t.gas_price = 0 AS is_system_transaction
    -- Attributes Deposited Spec:
    -- https://specs.optimism.io/protocol/deposits.html#l1-attributes-deposited-transaction
    , (
      (t.transaction_type = 126 OR t.gas_price = 0)
      AND t.from_address = lower('0xDeaDDEaDDeAdDeAdDEAdDEaddeAddEAdDEAd0001')
      AND t.to_address = lower('0x4200000000000000000000000000000000000015')
    ) AS is_attributes_deposited_transaction

    , epoch_to_hour(t.block_timestamp) AS block_hour

  FROM {{ raw_transactions }} AS t
  INNER JOIN pb AS b
    ON t.block_number = b.number
  WHERE 1 = 1
)

-- Add fallback l1 gas estimate based on observed fee and weighted gas and blob prices.
-- Ecotone+ specs on L1 Fee Calculations: https://specs.optimism.io/protocol/exec-engine.html#l1-cost-fees-l1-fee-vault
-- Fjord+ specs on Estimated Size: https://specs.optimism.io/protocol/fjord/predeploys.html#l1-gas-usage-estimation
, pt2 AS (
  SELECT
    *
    -- Note that this is the "unified" L1 Gas Used.
    -- The meaning of the field has changed in Fjord.
    , coalesce(receipt_l1_gas_used, 16 * estimated_size) AS l1_gas_used_unified
  FROM (
    SELECT
      *
      -- Estimated Size in bytes calculation, post-Fjord.
      -- This is not equivalent to L1 Gas Used.
      , (l1_fee / (
        (16 * l1_base_fee_scalar * l1_gas_price)
        + (l1_blob_base_fee_scalar * l1_blob_base_fee)
      ))::INT64
        AS estimated_size
    FROM pt1
  )
)

-- Add more fee calculations.
-- Reuses results from the previous CTEs.

, pt3 AS (
  SELECT
    *

    -- Total fee
    , l2_fee + l1_fee AS tx_fee

    -- L2 Legacy Fee
    , if(l2_priority_fee = 0, l2_fee - l2_base_fee, 0) AS l2_legacy_extra_fee

    -- L1 Base
    , div16(l1_gas_used_unified) * coalesce(16 * l1_base_fee_scalar, l1_fee_scalar) * l1_gas_price AS l1_base_fee
    , div16(l1_gas_used_unified) * coalesce(16 * l1_base_fee_scalar, l1_fee_scalar) AS l1_base_scaled_size

    -- L1 Blob
    , coalesce(div16(l1_gas_used_unified) * l1_blob_base_fee_scalar * l1_blob_base_fee, 0) AS l1_blob_fee
    , coalesce(div16(l1_gas_used_unified) * l1_blob_base_fee_scalar, 0) AS l1_blob_scaled_size

  FROM pt2
)


-- Generate gas fee breakdowns in native terms, for later aggregation
-- Generate gas prices in gwei terms
SELECT
  *

  -- Fees
  , wei_to_eth(tx_fee) AS tx_fee_native

  -- Native Breakdown
  , wei_to_eth(l1_fee) AS l1_fee_native
  , wei_to_eth(l2_fee) AS l2_fee_native

  -- Native L1 Breakdown
  , wei_to_eth(l1_base_fee) AS l1_base_fee_native
  , wei_to_eth(l1_blob_fee) AS l1_blob_fee_native

  -- Native L2 Breakdown
  , wei_to_eth(l2_base_fee) AS l2_base_fee_native
  , wei_to_eth(l2_priority_fee) AS l2_priority_fee_native
  , wei_to_eth(l2_legacy_extra_fee) AS l2_legacy_extra_fee_native

  -- Gas Prices
  , wei_to_gwei(gas_price) AS l2_gas_price_gwei
  , wei_to_gwei(base_fee_per_gas) AS l2_base_gas_price_gwei
  , wei_to_gwei(max_priority_fee_per_gas) AS l2_priority_gas_price_gwei
  , wei_to_gwei(legacy_extra_fee_per_gas) AS l2_legacy_extra_gas_price_gwei

  , wei_to_gwei(l1_gas_price) AS l1_base_gas_price_gwei
  , wei_to_gwei(l1_blob_base_fee) AS l1_blob_base_gas_price_gwei

FROM pt3
