/*Aggreagte traces by day,
        The internal contract called (trace to address),
        direct contract called (tx to address),
        and direct function called (tx method id).
        This will be used as the to show in what direct user action contracts are often called within
        (i.e. see that an oracle contract was called within a lending market action)
*/

-- Get Unique contracts that call this contract, since we lose this granularity at the to_hash level
WITH get_unique_callers AS (
        SELECT 
                dt, chain_id, trace_to_address, tx_to_address, tx_method_id,
                COUNT(DISTINCT trace_from_address) AS count_unique_trace_from_addresses
        FROM aggregated_traces_tr_from_tr_to_hash
        GROUP BY 
        dt, chain, network, chain_id, trace_to_address, tx_to_address, tx_method_id
)

, raw_aggregation AS (
SELECT 
dt, chain, network, chain_id, trace_to_address, tx_to_address, tx_method_id
-- Aggregate transaction metrics, in transactions when a given contract was called
/*
        Note: We can NOT sum these up at the project level, since a project may have
        many of its contracts called in a single transaction.

        For these use cases (i.e. project impact metrics), we can aggregate `daily_trace_calls_agg_to_hash`
        at the project name level, only after all trace_to_address entries are mapped to their respective
        project name (i.e. a transaction may call 10 contracts, but this may only represent 3 projects).
*/
-- Attributes
  -- Since we're aggregating from the to & hash level, count(*) returns distinct transactions
  , COUNT(*) AS count_transactions_called
  , COUNT(*) FILTER (WHERE tx_success) AS count_transactions_called_tx_success
  , COUNT(DISTINCT block_number) AS count_unique_blocks_called
  , COUNT(DISTINCT tx_from_address) AS count_unique_tx_from_addresses
-- Transaction-Level gas & fees
  , SUM(tx_l2_gas_used) AS sum_tx_l2_gas_used_called
  , SUM(tx_l2_gas_used) FILTER (WHERE tx_success) AS sum_tx_l2_gas_used_called_tx_success

  , SUM(tx_fee_native) AS sum_tx_fee_native_called
  , SUM(tx_fee_native) FILTER (WHERE tx_success) AS sum_tx_fee_native_called_tx_success

  , SUM(tx_l1_fee_native) AS tx_l1_fee_native
  , SUM(tx_l1_fee_native) FILTER (WHERE tx_success) AS tx_l1_fee_native_tx_success

  , SUM(tx_l2_fee_native) AS tx_l2_fee_native
  , SUM(tx_l2_fee_native) FILTER (WHERE tx_success) AS tx_l2_fee_native_tx_success

  , SUM(tx_l2_priority_fee_native) AS tx_l2_priority_fee_native
  , SUM(tx_l2_priority_fee_native) FILTER (WHERE tx_success) AS tx_l2_priority_fee_native_tx_success

  , SUM(tx_l2_base_fee_native) AS tx_l2_base_fee_native
  , SUM(tx_l2_base_fee_native) FILTER (WHERE tx_success) AS tx_l2_base_fee_native_tx_success

  , SUM(tx_l2_legacy_extra_fee_native) AS tx_l2_legacy_extra_fee_native
  , SUM(tx_l2_legacy_extra_fee_native) FILTER (WHERE tx_success) AS tx_l2_legacy_extra_fee_native_tx_success

  -- Transaction-Level Gas Prices
  , SUM(tx_l2_gas_used * tx_l2_gas_price_gwei) / SUM(tx_l2_gas_used) AS avg_tx_l2_gas_price_gwei_called
  , SUM(tx_l2_gas_used * tx_l2_priority_gas_price_gwei) / SUM(tx_l2_gas_used) AS avg_tx_l2_priority_gas_price_gwei_called
  , SUM(tx_l2_gas_used * tx_l2_legacy_extra_gas_price_gwei) / SUM(tx_l2_gas_used) AS avg_tx_l2_legacy_extra_gas_price_gwei_called
  , SUM(tx_l2_gas_used * tx_l1_base_gas_price_gwei) / SUM(tx_l2_gas_used) AS avg_tx_l1_base_gas_price_gwei_called
  , SUM(tx_l2_gas_used * tx_l1_blob_base_gas_price_gwei) / SUM(tx_l2_gas_used) AS avg_tx_l1_blob_base_gas_price_gwei_called
  -- Transaction-Level transaction sizes
  , SUM(tx_input_byte_length) AS sum_tx_input_byte_length_called
  , SUM(tx_input_zero_bytes) AS sum_tx_input_zero_bytes_called
  , SUM(tx_input_nonzero_bytes) AS sum_tx_input_nonzero_bytes_called
  , SUM(tx_l1_base_scaled_size) AS sum_tx_l1_base_scaled_size_called
  , SUM(tx_l1_blob_scaled_size) AS sum_tx_l1_blob_scaled_size_called
  , SUM(tx_l1_gas_used_unified) AS sum_tx_l1_gas_used_unified_called
  , SUM(tx_estimated_size) AS sum_tx_estimated_size_called

-- Sum Internal Trace Gas
/*
        Note: As opposed to transaction-level equivalent metrics, these CAN be summed up at a project level.
        These methodologies were designed to distribute gas usage and fees across each call, so that they
        still represent a "part of a whole," whereas transaction-level metrics do not.
*/

  , SUM(sum_trace_gas_used) AS sum_trace_gas_used
  , SUM(sum_trace_gas_used) FILTER (WHERE tx_success) AS sum_trace_gas_used_tx_success

  , SUM(sum_trace_gas_used_minus_subtraces) AS sum_trace_gas_used_minus_subtraces
  , SUM(sum_trace_gas_used_minus_subtraces) FILTER (WHERE tx_success) AS sum_trace_gas_used_minus_subtraces_tx_success


  , SUM(sum_tx_l2_gas_used_amortized_by_call) AS sum_tx_l2_gas_used_amortized_by_call
  , SUM(sum_tx_l2_gas_used_amortized_by_call) FILTER (WHERE tx_success) AS sum_tx_l2_gas_used_amortized_by_call_tx_success

  , SUM(sum_tx_l1_gas_used_unified_amortized_by_call) AS sum_tx_l1_gas_used_unified_amortized_by_call
  , SUM(sum_tx_l1_base_scaled_size_amortized_by_call) AS sum_tx_l1_base_scaled_size_amortized_by_call
  , SUM(sum_tx_l1_blob_scaled_size_amortized_by_call) AS sum_tx_l1_blob_scaled_size_amortized_by_call
  , SUM(sum_tx_estimated_size_amortized_by_call) AS sum_tx_estimated_size_amortized_by_call

  , SUM(sum_tx_l2_fee_native_minus_subtraces) AS sum_tx_l2_fee_native_minus_subtraces
  , SUM(sum_tx_l2_fee_native_minus_subtraces) FILTER (WHERE tx_success) AS sum_tx_l2_fee_native_minus_subtraces_tx_success

  , SUM(sum_tx_l2_base_fee_native_minus_subtraces) AS sum_tx_l2_base_fee_native_minus_subtraces
  , SUM(sum_tx_l2_priority_fee_native_minus_subtraces) AS sum_tx_l2_priority_fee_native_minus_subtraces
  , SUM(sum_tx_l2_legacy_base_fee_native_minus_subtraces) AS sum_tx_l2_legacy_base_fee_native_minus_subtraces

  , SUM(sum_tx_fee_native_amortized_by_call) AS sum_tx_fee_native_amortized_by_call
  , SUM(sum_tx_fee_native_amortized_by_call) FILTER (WHERE tx_success) AS sum_tx_fee_native_amortized_by_call_tx_success

  , SUM(sum_tx_l2_fee_native_amortized_by_call) AS sum_tx_l2_fee_native_amortized_by_call
  , SUM(sum_tx_l2_fee_native_amortized_by_call) FILTER (WHERE tx_success) AS sum_tx_l2_fee_native_amortized_by_call_tx_success

  , SUM(sum_tx_l1_fee_native_amortized_by_call) AS sum_tx_l1_fee_native_amortized_by_call
  , SUM(sum_tx_l1_fee_native_amortized_by_call) FILTER (WHERE tx_success) AS sum_tx_l1_fee_native_amortized_by_call_tx_success

  , SUM(sum_tx_l2_base_fee_native_amortized_by_call) AS sum_tx_l2_base_fee_native_amortized_by_call
  , SUM(sum_tx_l2_priority_fee_native_amortized_by_call) AS sum_tx_l2_priority_fee_native_amortized_by_call

  , SUM(sum_tx_fee_native_l1_amortized_l2_minus_subtraces) AS sum_tx_fee_native_l1_amortized_l2_minus_subtraces

  -- Calls
  , SUM(count_top_level_calls) AS count_top_level_calls
  --count non-null trace addresses, null is the transaction-level call.
  , SUM(count_internal_calls_all_types) AS count_internal_calls_all_types
  , SUM(count_internal_calls_all_types_trace_success) AS count_internal_calls_all_types_trace_success
  --static calls only read state, and can not write
  , SUM(count_internal_calls_static_type) AS count_internal_calls_static_type
  , SUM(count_internal_calls_static_type_trace_success) AS count_internal_calls_static_type_trace_success
  --delegate calls call a function on another contract
  , SUM(count_internal_calls_delegate_type) AS count_internal_calls_delegate_type
  , SUM(count_internal_calls_delegate_type_trace_success) AS count_internal_calls_delegate_type_trace_success
  --normal function calls
  , SUM(count_internal_calls_call_type) AS count_internal_calls_call_type
  , SUM(count_internal_calls_call_type_trace_success) AS count_internal_calls_call_type_trace_success

  -- Experimental
  , COUNT(*) FILTER (WHERE is_transaction_with_internal_call_type_call) AS count_transactions_called_with_internal_type_call
  , COUNT(*) FILTER (WHERE is_transaction_with_internal_call_type_call_or_delegate) AS count_transactions_called_with_internal_type_call_or_delegate

  , SUM(sum_trace_gas_used_minus_subtraces) FILTER (
        WHERE tx_success AND is_transaction_with_internal_call_type_call
        ) AS sum_trace_gas_used_minus_subtraces_tx_success_called_with_internal_type_call
, SUM(sum_tx_l2_gas_used_amortized_by_call) FILTER (
        WHERE tx_success AND is_transaction_with_internal_call_type_call
        ) AS sum_tx_l2_gas_used_amortized_by_call_tx_success_called_with_internal_type_call
, SUM(sum_tx_l2_fee_native_minus_subtraces) FILTER (
        WHERE tx_success AND is_transaction_with_internal_call_type_call
        ) AS sum_tx_l2_fee_native_minus_subtraces_tx_success_called_with_internal_type_call
, SUM(sum_tx_l2_fee_native_amortized_by_call) FILTER (
        WHERE tx_success AND is_transaction_with_internal_call_type_call
        ) AS sum_tx_l2_fee_native_amortized_by_call_tx_success_called_with_internal_type_call
, SUM(sum_tx_fee_native_amortized_by_call) FILTER (
        WHERE tx_success AND is_transaction_with_internal_call_type_call
        ) AS sum_tx_fee_native_amortized_by_call_tx_success_called_with_internal_type_call

--count by trace type
,SUM(count_traces_type_all_types) AS count_traces_type_all_types
,SUM(count_traces_trace_type_call) AS count_traces_trace_type_call
,SUM(count_traces_trace_type_suicide) AS count_traces_trace_type_suicide
,SUM(count_traces_trace_type_create) AS count_traces_trace_type_create
,SUM(count_traces_trace_type_create2) AS count_traces_trace_type_create2
,SUM(count_traces_trace_type_create_any) AS count_traces_trace_type_create_any


FROM aggregated_traces_tr_to_hash
WHERE NOT is_system_transaction

GROUP BY
dt, chain, network, chain_id, trace_to_address, tx_to_address, tx_method_id
)

SELECT 
ra.*, gu.count_unique_trace_from_addresses

FROM raw_aggregation ra
LEFT JOIN get_unique_callers gu
ON ra.trace_to_address = gu.trace_to_address
AND ra.tx_to_address = gu.tx_to_address
AND ra.tx_method_id = gu.tx_method_id
AND ra.dt = gu.dt
AND ra.chain_id = gu.chain_id
