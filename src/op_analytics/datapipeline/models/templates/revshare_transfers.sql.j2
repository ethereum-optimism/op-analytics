WITH from_addresses AS (
  SELECT
    revshare_from_chain
    , revshare_from_addresses
    , token_addresses
    , expected_chains
  FROM {{ from_addresses_config }}
)

, to_addresses AS (
  SELECT
    to_address
    , description
    , end_date
    , expected_chains
  FROM {{ to_addresses_config }}
)

SELECT * FROM from_addresses
-- -- Native transfers
-- SELECT DISTINCT
--   t.dt
--   , t.chain
--   , t.chain_id
--   , t.network
--   , t.block_timestamp
--   , t.block_number
--   , t.block_hash
--   , t.transaction_hash
--   , t.transaction_index
--   , t.trace_address
--   , t.from_address
--   , t.to_address
--   , t.amount
--   , t.amount_lossless
--   , t.transfer_type
--   , NULL AS token_address
--   , f.revshare_from_chain
--   , f.revshare_from_addresses
--   , f.token_addresses
--   , f.expected_chains AS from_expected_chains
--   , ta.expected_chains AS to_expected_chains
--   , ta.description AS to_address_description
-- FROM {{ native_transfers }} t
-- INNER JOIN from_addresses f
--   ON t.from_address = ANY(f.revshare_from_addresses)
--   AND t.chain = ANY(f.expected_chains)
-- INNER JOIN to_addresses ta
--   ON t.to_address = ta.to_address
--   AND t.chain = ANY(ta.expected_chains)
--   AND (ta.end_date IS NULL OR t.dt <= ta.end_date)

-- UNION ALL

-- -- Token transfers
-- SELECT DISTINCT
--   t.dt
--   , t.chain
--   , t.chain_id
--   , t.network
--   , t.block_timestamp
--   , t.block_number
--   , t.block_hash
--   , t.transaction_hash
--   , t.transaction_index
--   , t.trace_address
--   , t.from_address
--   , t.to_address
--   , t.amount
--   , t.amount_lossless
--   , t.transfer_type
--   , t.token_address
--   , f.revshare_from_chain
--   , f.revshare_from_addresses
--   , f.token_addresses
--   , f.expected_chains AS from_expected_chains
--   , ta.expected_chains AS to_expected_chains
--   , ta.description AS to_address_description
-- FROM {{ all_transfers }} t
-- INNER JOIN from_addresses f
--   ON t.from_address = ANY(f.revshare_from_addresses)
--   AND t.chain = ANY(f.expected_chains)
--   AND t.token_address = ANY(f.token_addresses)
-- INNER JOIN to_addresses ta
--   ON t.to_address = ta.to_address
--   AND t.chain = ANY(ta.expected_chains)
--   AND (ta.end_date IS NULL OR t.dt <= ta.end_date)