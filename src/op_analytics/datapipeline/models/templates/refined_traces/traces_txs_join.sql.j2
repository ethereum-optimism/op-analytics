SELECT
  r.*

  -- Include fields from the transaction. So that we never have to join back
  -- to the transaction table.
  , t.success AS tx_success
  , t.from_address AS tx_from_address
  , t.to_address AS tx_to_address
  , t.method_id AS tx_method_id
  , t.l2_gas_used AS tx_l2_gas_used

  -- Quenttities that are Decimal on the transactions table are cas to double here.
  -- We will only need them for aggregations going forward, so double precision
  -- is sufficient.
  , CAST(t.tx_fee_native AS DOUBLE) AS tx_fee_native
  , CAST(t.l1_fee_native AS DOUBLE) AS tx_l1_fee_native
  , CAST(t.l2_fee_native AS DOUBLE) AS tx_l2_fee_native
  , CAST(t.l2_priority_fee_native AS DOUBLE) AS tx_l2_priority_fee_native
  , CAST(t.l2_base_fee_native AS DOUBLE) AS tx_l2_base_fee_native
  , CAST(t.l2_legacy_extra_fee_native AS DOUBLE) AS tx_l2_legacy_extra_fee_native

  , CAST(t.l2_gas_price_gwei AS DOUBLE) AS tx_l2_gas_price_gwei
  , CAST(t.l2_priority_gas_price_gwei AS DOUBLE) AS tx_l2_priority_gas_price_gwei
  , CAST(t.l2_legacy_extra_gas_price_gwei AS DOUBLE) AS tx_l2_legacy_extra_gas_price_gwei
  , CAST(t.l1_base_gas_price_gwei AS DOUBLE) AS tx_l1_base_gas_price_gwei
  , CAST(t.l1_blob_base_gas_price_gwei AS DOUBLE) AS tx_l1_blob_base_gas_price_gwei

  , CAST(t.l1_gas_used_unified AS DOUBLE) AS tx_l1_gas_used_unified
  , CAST(t.l1_base_scaled_size AS DOUBLE) AS tx_l1_base_scaled_size
  , CAST(t.l1_blob_scaled_size AS DOUBLE) AS tx_l1_blob_scaled_size
  , CAST(t.estimated_size AS DOUBLE) AS tx_estimated_size

  , t.input_byte_length AS tx_input_byte_length
  , t.input_zero_bytes AS tx_input_zero_bytes
  , t.input_byte_length - t.input_zero_bytes AS tx_input_nonzero_bytes

  -- Parent trace fees.
  -- the subtraces will never add up to part of whole, but leave as is
  , r.gas_used_minus_subtraces * gwei_to_eth(t.l2_gas_price_gwei)
    AS tx_l2_fee_native_minus_subtraces

  , r.gas_used_minus_subtraces * gwei_to_eth(t.l2_base_gas_price_gwei)
    AS tx_l2_base_fee_native_minus_subtraces

  , r.gas_used_minus_subtraces * gwei_to_eth(t.l2_priority_gas_price_gwei)
    AS tx_l2_priority_fee_native_minus_subtraces

  , r.gas_used_minus_subtraces * gwei_to_eth(t.l2_legacy_extra_gas_price_gwei)
    AS tx_l2_legacy_base_fee_native_minus_subtraces

  -- Amortize evenly across all calls

  , t.l2_gas_used / r.num_traces_in_txn
    AS tx_l2_gas_used_amortized_by_call

  , t.l1_gas_used_unified / r.num_traces_in_txn
    AS tx_l1_gas_used_unified_amortized_by_call

  , t.l1_base_scaled_size / r.num_traces_in_txn
    AS tx_l1_base_scaled_size_amortized_by_call

  , t.l1_blob_scaled_size / r.num_traces_in_txn
    AS tx_l1_blob_scaled_size_amortized_by_call

  , t.estimated_size / r.num_traces_in_txn
    AS tx_estimated_size_amortized_by_call

  , t.tx_fee_native / r.num_traces_in_txn
    AS tx_fee_native_amortized_by_call

  , t.l2_fee_native / r.num_traces_in_txn
    AS tx_l2_fee_native_amortized_by_call

  , t.l1_fee_native / r.num_traces_in_txn
    AS tx_l1_fee_native_amortized_by_call

  , t.l2_base_fee_native / r.num_traces_in_txn
    AS tx_l2_base_fee_native_amortized_by_call

  , t.l2_priority_fee_native / r.num_traces_in_txn
    AS tx_l2_priority_fee_native_amortized_by_call


FROM {{ traces_with_gas_used }} AS r
INNER JOIN {{ refined_transactions_fees }} AS t
  ON
    r.block_number = t.block_number
    AND r.transaction_hash = t.hash
