WITH

pb AS (
  SELECT
    number,
    base_fee_per_gas
  FROM
    blocks
),

-- Select the columns that we want from transactions joined to blocks.
-- Include some minor transformations that are needed for further calculations.
pt1 AS (
  SELECT
    -- Transaction fields
    t.dt,
    t.chain,
    t.chain_id,
    t.nonce,
    t.from_address,
    t.to_address,
    t.block_number,
    t.block_timestamp,
    t.gas_price,
    t.receipt_gas_used,
    t.receipt_l1_gas_used,
    -- Fees
    t.receipt_l1_fee AS l1_fee,
    t.receipt_l1_gas_price,
    t.receipt_l1_blob_base_fee,
    -- L2 Fees and breakdown into BASE and PRIORITY contributions
    t.gas_price * t.receipt_gas_used AS l2_fee,
    t.max_priority_fee_per_gas * t.receipt_gas_used AS l2_priority_fee,
    b.base_fee_per_gas * t.receipt_gas_used AS l2_base_fee,
    -- Convenience columns
    epoch_to_hour(t.block_timestamp) AS block_hour,
    substring(t.input, 1, 10) AS method_id,
    t.receipt_status = 1 AS success,
    -- L1 Fee BASE and BLOB scalars
    coalesce(16 * micro(t.receipt_l1_base_fee_scalar), t.receipt_l1_fee_scalar::DECIMAL(12, 6))
      AS l1_base_scalar,
    coalesce(micro(t.receipt_l1_blob_base_fee_scalar), 0) AS l1_blob_scalar
  FROM transactions AS t
  INNER JOIN pb AS b ON t.block_number = b.number
  WHERE
    t.gas_price > 0
    -- Optional address filter for faster results when developing.
    -- AND from_address LIKE '0x00%'  
),


-- Add fallback l1 gas estimate based on observed fee and weighted gas and blob prices.
pt2 AS (
  SELECT
    *,
    coalesce(
      receipt_l1_gas_used,
      round(16 * l1_fee / (
        (l1_base_scalar * receipt_l1_gas_price)
        + (l1_blob_scalar * receipt_l1_blob_base_fee)
      ))::INT64
    ) AS l1_gas_used
  FROM pt1
)

-- Add more fee calculations.
-- Reuses results from the previous CTEs.

SELECT
  *,
  --
  -- Total fee
  l2_fee + l1_fee AS tx_fee,
  -- 
  -- L2 Legacy Fee
  if(l2_priority_fee = 0, l2_fee + l1_fee - l2_base_fee, 0) AS l2_base_legacy,
  -- 
  -- L1 Base 
  div16(l1_gas_used) * l1_base_scalar * receipt_l1_gas_price AS l1_base_fee,
  div16(l1_gas_used) * l1_base_scalar AS l1_base_scaled_size,
  -- 
  -- L1 Blob
  div16(l1_gas_used) * l1_blob_scalar * receipt_l1_blob_base_fee AS l1_blob_fee,
  div16(l1_gas_used) * l1_blob_scalar AS l1_blob_scaled_size


FROM pt2
